name: Docker CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  WEB_IMAGE_NAME: ${{ github.repository }}/web
  SIGNALING_IMAGE_NAME: ${{ github.repository }}/signaling

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment file
      run: |
        cp .env.example .env
        echo "DEEPL_API_KEY=test-key" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Build and start services
      run: |
        docker compose --profile dev up -d --build
        
    - name: Wait for services to be healthy
      run: |
        timeout 300 bash -c 'until docker compose exec web wget --no-verbose --tries=1 --spider http://localhost:3000/supichat/api/health; do sleep 5; done'
        timeout 300 bash -c 'until docker compose exec signaling wget --no-verbose --tries=1 --spider http://localhost:4001/health; do sleep 5; done'

    - name: Run unit tests
      run: |
        docker compose exec -T web npm test

    - name: Run linting
      run: |
        docker compose exec -T web npm run lint

    - name: Run build verification
      run: |
        docker compose exec -T web npm run build

    - name: Run smoke tests
      run: |
        docker compose exec -T web npm run smoke

    - name: Check service logs
      if: failure()
      run: |
        docker compose logs web
        docker compose logs signaling

    - name: Clean up
      if: always()
      run: |
        docker compose down -v

  security-scan:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build images for scanning
      run: |
        docker build -f Dockerfile.web --target production -t supichat/web:scan .
        docker build -f Dockerfile.signaling --target production -t supichat/signaling:scan .

    - name: Run Trivy vulnerability scanner - Web
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'supichat/web:scan'
        format: 'sarif'
        output: 'trivy-web-results.sarif'

    - name: Run Trivy vulnerability scanner - Signaling
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'supichat/signaling:scan'
        format: 'sarif'
        output: 'trivy-signaling-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-web-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Web image
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.WEB_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Signaling image
      id: meta-signaling
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.SIGNALING_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.web
        target: production
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Signaling image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.signaling
        target: production
        push: true
        tags: ${{ steps.meta-signaling.outputs.tags }}
        labels: ${{ steps.meta-signaling.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create test environment
      run: |
        cp .env.example .env
        echo "DEEPL_API_KEY=test-key" >> .env
        echo "NODE_ENV=test" >> .env

    - name: Start full stack with TURN server
      run: |
        docker compose --profile dev --profile turn up -d --build

    - name: Wait for all services
      run: |
        timeout 300 bash -c 'until docker compose exec web wget --no-verbose --tries=1 --spider http://localhost:3000/supichat/api/health; do sleep 5; done'
        timeout 300 bash -c 'until docker compose exec signaling wget --no-verbose --tries=1 --spider http://localhost:4001/health; do sleep 5; done'

    - name: Run integration tests
      run: |
        # Test web app health endpoint
        docker compose exec -T web wget --no-verbose --tries=1 --spider http://localhost:3000/supichat/api/health
        
        # Test signaling server health endpoint  
        docker compose exec -T signaling wget --no-verbose --tries=1 --spider http://localhost:4001/health
        
        # Test service communication
        docker compose exec -T web curl -f http://signaling:4001/health

    - name: Test production build
      run: |
        echo "BUILD_TARGET=production" >> .env
        echo "NODE_ENV=production" >> .env
        docker compose --profile prod up -d --build
        
        # Wait for production services
        timeout 300 bash -c 'until docker compose exec web wget --no-verbose --tries=1 --spider http://localhost:3000/supichat/api/health; do sleep 5; done'
        timeout 300 bash -c 'until docker compose exec signaling wget --no-verbose --tries=1 --spider http://localhost:4001/health; do sleep 5; done'

    - name: Clean up
      if: always()
      run: |
        docker compose down -v
        docker system prune -f